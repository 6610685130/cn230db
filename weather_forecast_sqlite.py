import requests
import sqlite3
from datetime import datetime

# üîπ ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏∑‡∏≠‡∏á + ‡∏û‡∏¥‡∏Å‡∏±‡∏î
cities = {
    "Bangkok": {"lat": 13.75, "lon": 100.5},
    "Chiang Mai": {"lat": 18.79, "lon": 98.98},
    "Tokyo": {"lat": 35.68, "lon": 139.76},
    "Osaka": {"lat": 34.69, "lon": 135.50},
    "Seoul": {"lat": 37.57, "lon": 126.98},
    "Busan": {"lat": 35.18, "lon": 129.08},
}

# üîπ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• SQLite
conn = sqlite3.connect("weather.db")
cursor = conn.cursor()

cursor.execute('''
    CREATE TABLE IF NOT EXISTS forecast (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        date TEXT,
        temp_max REAL,
        temp_min REAL,
        city TEXT,
        timestamp TEXT
    )
''')

# üîπ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Open-Meteo API
def fetch_weather(lat, lon):
    url = "https://api.open-meteo.com/v1/forecast"
    params = {
        "latitude": lat,
        "longitude": lon,
        "daily": "temperature_2m_max,temperature_2m_min",
        "timezone": "auto"
    }
    response = requests.get(url, params=params)
    return response.json()

# üîπ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á DB
def save_weather_to_db(data, city):
    dates = data['daily']['time']
    max_temps = data['daily']['temperature_2m_max']
    min_temps = data['daily']['temperature_2m_min']

    for i in range(len(dates)):
        cursor.execute('''
            INSERT INTO forecast (date, temp_max, temp_min, city, timestamp)
            VALUES (?, ?, ?, ?, ?)
        ''', (
            dates[i],
            max_temps[i],
            min_temps[i],
            city,
            datetime.utcnow().isoformat()
        ))
    conn.commit()

# üîπ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
def run_sql_analysis():
    print("="*60)
    print("üìä ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î/‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡πÄ‡∏°‡∏∑‡∏≠‡∏á:")
    print("-"*60)
    for row in cursor.execute('''
        SELECT city, AVG(temp_max), AVG(temp_min)
        FROM forecast
        GROUP BY city
    '''):
        city, avg_max, avg_min = row
        print(f"üìç {city:<10} | ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: {avg_max:.1f}¬∞C | ‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: {avg_min:.1f}¬∞C")

    print("\nüî• ‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏£‡πâ‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 7 ‡∏ß‡∏±‡∏ô:")
    cursor.execute('''
        SELECT city, date, MAX(temp_max) FROM forecast
    ''')
    city, date, temp = cursor.fetchone()
    print(f"üìç {city} | ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {date} | ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î: {temp}¬∞C")

    print("\n‚ùÑÔ∏è ‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏¢‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 7 ‡∏ß‡∏±‡∏ô:")
    cursor.execute('''
        SELECT city, date, MIN(temp_min) FROM forecast
    ''')
    city, date, temp = cursor.fetchone()
    print(f"üìç {city} | ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {date} | ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î: {temp}¬∞C")

    print("\nüìà ‡∏ß‡∏±‡∏ô‡∏£‡πâ‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏°‡∏∑‡∏≠‡∏á:")
    print("-"*60)
    for row in cursor.execute('''
        SELECT city, date, MAX(temp_max)
        FROM forecast
        GROUP BY city
    '''):
        print(f"üìç {row[0]:<10} | {row[1]} | {row[2]}¬∞C")

    print("\nüìâ ‡∏ß‡∏±‡∏ô‡πÄ‡∏¢‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏°‡∏∑‡∏≠‡∏á:")
    print("-"*60)
    for row in cursor.execute('''
        SELECT city, date, MIN(temp_min)
        FROM forecast
        GROUP BY city
    '''):
        print(f"üìç {row[0]:<10} | {row[1]} | {row[2]}¬∞C")

    print("\nüîÅ ‡∏ä‡πà‡∏ß‡∏á‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥ (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î - ‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î) ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏°‡∏∑‡∏≠‡∏á:")
    print("-"*60)
    for row in cursor.execute('''
        SELECT city, MAX(temp_max) - MIN(temp_min) AS range
        FROM forecast
        GROUP BY city
        ORDER BY range DESC
    '''):
        print(f"üìç {row[0]:<10} | ‡∏ä‡πà‡∏ß‡∏á‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥: {row[1]:.2f}¬∞C")

    print("\nüåû ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡πâ‡∏≠‡∏ô‡∏à‡∏±‡∏î (> 35¬∞C) ‡∏ï‡πà‡∏≠‡πÄ‡∏°‡∏∑‡∏≠‡∏á:")
    print("-"*60)
    for row in cursor.execute('''
        SELECT city, COUNT(*) AS hot_days
        FROM forecast
        WHERE temp_max > 35
        GROUP BY city
        ORDER BY hot_days DESC
    '''):
        print(f"üìç {row[0]:<10} | {row[1]} ‡∏ß‡∏±‡∏ô")

    print("\nü•∂ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏¢‡πá‡∏ô (< 20¬∞C) ‡∏ï‡πà‡∏≠‡πÄ‡∏°‡∏∑‡∏≠‡∏á:")
    print("-"*60)
    for row in cursor.execute('''
        SELECT city, COUNT(*) AS cold_days
        FROM forecast
        WHERE temp_min < 20
        GROUP BY city
        ORDER BY cold_days DESC
    '''):
        print(f"üìç {row[0]:<10} | {row[1]} ‡∏ß‡∏±‡∏ô")
    print("="*60)

# üîπ ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°‡∏Å‡πà‡∏≠‡∏ô (soft reset)
cursor.execute("DELETE FROM forecast")
conn.commit()


# üîπ ‡∏î‡∏∂‡∏á‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∏‡∏Å‡πÄ‡∏°‡∏∑‡∏≠‡∏á
for city, loc in cities.items():
    data = fetch_weather(loc['lat'], loc['lon'])
    save_weather_to_db(data, city)

# üîπ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
run_sql_analysis()
conn.close()


